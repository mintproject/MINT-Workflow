#!/usr/bin/env python3

# user the MINT data catalog to find the FLDAS data

import configparser
import datetime
import json
import os
import re
import requests
import subprocess
import sys

from dateutil import parser


def download(scenario, standard_name, date, out_file_path):

    url = 'http://mint-demo.westus2.cloudapp.azure.com/data_sets'
    params = {
        'standard_name': standard_name,
        'start_time': '%sT00:00:00' % date,
        'end_time': '%sT23:59:59' % date,
    }
    print(params)
    r = requests.get(url, params=params)
    if not r.ok:
         r.raise_for_status()
         sys.exit(1)
    
    data = json.loads(r.text)
    
    # TODO: handle multiple hits
    variable_id = None
    for result in data['results']['bindings']:
        print(json.dumps(result, indent=4, sort_keys=True))
        variable_id = result['variable_id']['value']
    if not variable_id:
        print("Unable to find data in data catalog!")
        sys.exit(1)
    
    # now that we have a variable_id, get the data location
    url = "http://mint-demo.westus2.cloudapp.azure.com/data_sets/get_location_url"
    headers = {'Content-type': 'application/json'}
    payload = {'variable_id': variable_id}
    r = requests.post(url, headers=headers, json=payload)
    if not r.ok:
        r.raise_for_status()
        sys.exit(1)
    
    data = json.loads(r.text)
    print(json.dumps(data, indent=4, sort_keys=True))

    # if scenario is anything but baseline, update the url
    if scenario != 'baseline':
        url = re.sub('FLDAS/FLDAS_NOAH01_A_EA_D\.001',
                     'FLDAS/scenarios/' + scenario + 'FLDAS_NOAH01_A_EA_D.001',
                     url)
    
    # now we have the final url
    url = data['results']['bindings'][0]['storage_path']['value']
    r = requests.get(url)
    if not r.ok:
        r.raise_for_status()
        sys.exit(1)

    # make sure we have subdirs
    try:
        os.makedirs(os.path.dirname(out_file_path))
    except:
        pass
    
    # write the data
    f = open(out_file_path, 'wb')
    for chunk in r.iter_content(chunk_size=128):
        f.write(chunk)
    f.close()

cur_date = datetime.date(2017, 1, 1)
end_date = datetime.date(2017, 12, 31)

# get the general configuration from the global mint_run.config
fp = open('mint_run.config', 'r')
config_string = '[DEFAULT]\n' + fp.read()
fp.close()
run_config = configparser.ConfigParser()
run_config.read_string(config_string)

start_year = run_config.get('DEFAULT', 'start_year')
end_year = run_config.get('DEFAULT', 'end_year')

cur_date = datetime.date(int(start_year), 1, 1)
end_date = datetime.date(int(end_year), 12, 31)

scenario = run_config.get('DEFAULT', 'scenario')
if scenario is None or scenario == '':
    scenario = 'baseline'

while cur_date <= end_date:

    # TODO: Properly match this to the correct variables
    for variable in [
        'air_temperature',
        'specific_humidity',
        'total_evapotranspiration',
        'wind_speed'
        ]:

        out_name = 'FLDAS_NOAH01_A_EA_D.001/%4d/%02d/FLDAS_NOAH01_A_EA_D.A%4d%02d%02d.001.nc' \
                    %(cur_date.year, cur_date.month, cur_date.year, cur_date.month, cur_date.day)

        if not os.path.exists(out_name):
            download(scenario, variable, cur_date.isoformat(), out_name)
        else:
            print('... already downloaded: ' + out_name)

    cur_date = cur_date + datetime.timedelta(days=1)

if subprocess.call('tar ' + sys.argv[1] + ' FLDAS_NOAH01_A_EA_D.001', shell=True) != 0:
    print("Taring of data failed")
    sys.exit(1)

